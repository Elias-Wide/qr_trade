"""–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–Ω–∫–µ—Ç—ã."""

from datetime import timedelta
from typing import Any

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InlineKeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.bot.banners import Captions, get_img
from app.bot.constants import (
    CONFIRM,
    INTRO_SURVEY_TEXT,
    INVALID_DATA_TYPE,
    INVALID_ID_MESSAGE,
    MAIN_MENU,
    MANAGER_ID,
    POINT_ID,
    REGISTRATION_CANCELED,
    REGISTRATION_CONFIRMED,
    REGISTRATION_DONE,
    SurveyQuestions,
)
from app.bot.filters import (
    AccesCodeFilter,
    ManagerExistFilter,
    PointExistFilter,
    UserExistFilter,
)
from app.bot.handlers.user_handlers import process_start_command
from app.bot.keyboards.registration_kb import (
    create_back_to_menu_kb,
    create_registration_kb,
)
from app.users.dao import UsersDAO

from app.bot.handlers.states import RegistrationStates


registration_router = Router()


async def return_to_main_menu(
    message: Message,
    state: FSMContext,
) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.set_state(RegistrationStates.finished)
    await process_start_command(message, state)


@registration_router.message(default_state, CommandStart(), ~UserExistFilter())
async def begin_registration(
    message: Message,
    state: FSMContext,
) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–æ–≥–ª–∞—Å–∏–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."""
    await state.update_data(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
    )
    await message.answer_photo(
        photo=await get_img("registration_start"),
        caption=Captions.registration_start,
        reply_markup=await create_registration_kb(),
    )
    await state.set_state(RegistrationStates.consent_confirm)


@registration_router.callback_query(F.data == REGISTRATION_CANCELED)
async def handle_survey_cancel(
    callback_query: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û—Ç–∫–∞–∑ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await state.set_state(default_state)
    await callback_query.message.answer_photo(
        photo=await get_img("no_registr"),
        caption=Captions.no_registr,
    )


@registration_router.callback_query(
    RegistrationStates.consent_confirm, F.data == REGISTRATION_CONFIRMED
)
async def ask_access_code(
    callback_query: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."""
    await callback_query.message.answer(text=SurveyQuestions.ACCESS_CODE)
    await state.set_state(RegistrationStates.access_code)


@registration_router.message(
    RegistrationStates.access_code, F.content_type == "text", AccesCodeFilter()
)
async def ask_manager_id(
    message: Message,
    state: FSMContext,
) -> None:
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ manager id, –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è."""
    await message.answer(text=SurveyQuestions.MANAGER_ID)
    await state.set_state(RegistrationStates.manager_id_question)


@registration_router.message(
    RegistrationStates.manager_id_question,
    F.text.isdigit(),
    ManagerExistFilter(),
)
async def ask_point_id(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ client id –≤ state. –í–æ–ø—Ä–æ—Å –ø—Ä–æ point id."""
    await state.update_data(manager_id=int(message.text))
    await message.answer(text=SurveyQuestions.POINT_ID)
    await state.set_state(RegistrationStates.point_id_question)


@registration_router.message(
    RegistrationStates.point_id_question, F.text.isdigit(), PointExistFilter()
)
async def finish_registration(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ point –≤ state.

    –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ –∏–∑ state –≤ –ë–î. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
    """
    await state.update_data(
        point_id=int(message.text),
    )
    registration_data = await state.get_data()
    await UsersDAO.create(registration_data),
    await message.answer_photo(await get_img(menu_name="registration_done"))

    await state.set_state(RegistrationStates.finished)
    await process_start_command(message, state)


@registration_router.message(RegistrationStates.manager_id_question, ~F.text.isdigit())
@registration_router.message(RegistrationStates.point_id_question, ~F.text.isdigit())
async def handle_ivalid_data_type(message: Message):
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ç–∏–ø–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ point –∏–ª–∏ manager id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∏–Ω–∞—á–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä."""
    await send_ivalid_data_type_message(message)


@registration_router.message(
    RegistrationStates.access_code, F.content_type == "text", ~AccesCodeFilter()
)
async def handle_invalid_acces_code(message: Message) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º manager id."""
    await message.answer(text="üî¥–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞üî¥")


@registration_router.message(RegistrationStates.access_code)
async def handle_invalid_acces_code_type(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞."""
    await send_ivalid_data_type_message(message)


@registration_router.message(
    RegistrationStates.manager_id_question, F.text.isdigit(), ~ManagerExistFilter()
)
async def handle_invalid_manager_id(message: Message) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º manager id."""
    await send_ivalid_data_type_message(data_type=MANAGER_ID, message=message)


@registration_router.message(
    RegistrationStates.point_id_question, F.text.isdigit(), ~PointExistFilter()
)
async def handle_invalid_point_id(message: Message) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º point id."""
    await send_ivalid_data_type_message(data_type=POINT_ID, message=message)


async def send_ivalid_data_type_message(message: Message, data_type: str = None):
    if not data_type:
        text = INVALID_DATA_TYPE
    else:
        text = INVALID_ID_MESSAGE[data_type]
    await message.answer(text=text)


@registration_router.message(CommandStart(), UserExistFilter())
async def handle_existing_user(
    message: Message,
    state: FSMContext,
) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    await state.set_state(RegistrationStates.finished)
    await return_to_main_menu(message, state)
