import os
import qrtools
import re
import random
import string
from pyzbar.pyzbar import decode
from PIL import Image
from aiogram.types import Message
from app.bot.constants import FMT_JPG, NOTIFICATION_TYPE, REGEX_QR_PATTERN
from app.bot.create_bot import bot
from app.bot.keyboards.buttons import NOTIFICATIONS_BTNS
from app.core.config import QR_DIR
from app.core.logging import logger
from app.notifications.dao import NotificationsDAO
from app.points.models import Points
from app.users.dao import UsersDAO


async def generate_filename() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞."""
    filename = [
        random.choice(
            string.ascii_lowercase + string.digits if i != 5 else string.ascii_uppercase
        )
        for i in range(10)
    ]
    return "".join(filename)


# async def create_qr(data: str, file_name: str):
#     """–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É —Å—Ç–∞—Ç–∏–∫–∏."""
#     qrcode = segno.make_qr(data)
#     qrcode.save(
#         STATIC_DIR / "trades" / file_name,
#         scale=10,
#     )


async def decode_qr(filepath: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞."""
    decocdeQR = decode(Image.open(filepath))
    return decocdeQR[0].data.decode("ascii")

async def delete_file(path: str, file_name: str):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        os.remove(path / (file_name + FMT_JPG))
    except:
        logger("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")


async def delete_files_in_folder(folder_path: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
        except Exception as e:
            logger(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}. {e}")


async def download_file(file, destination) -> str:
    """
    –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–º—è, —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª –∏–∑ –±–æ—Ç–∞ –∏
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    logger()
    file_name = await generate_filename()
    filename_with_format = file_name + FMT_JPG
    path = destination / (file_name + FMT_JPG)
    file_from_bot = await bot.get_file(file.file_id)
    destination_file = await bot.download_file(
        file_from_bot.file_path, os.path.join(os.getcwd(), path)
    )
    return file_name


async def get_code_image(filename: str):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏."""
    pass


async def validate_photo(message: Message) -> bool:
    """
    –í–∞–ª–∏–¥—Ü–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è,
    –¥–∞–ª–µ–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, –æ–Ω –≤–æ–∑—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞
    –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
    –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª(qr-–∫–æ–¥) –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–∫–æ–π
    –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ - –µ—Å–ª–∏ True -–≤ –∑–Ω–∞—á–µ–Ω–∏–µ value –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
    –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É - —Ñ–∞–π–ª —É–¥–∞–ª—è–µ—Ç—Å—è.
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ file_name –∏ value.
    """
    result_data: dict[str] = {
        "file_name": None,
        "value": None,
    }
    file_name = await download_file(message.photo[-1], QR_DIR)
    if file_name:
        result_data["file_name"] = file_name
        value = await decode_qr(QR_DIR / (file_name + FMT_JPG))
        if value:
            if re.fullmatch(REGEX_QR_PATTERN, value):
                result_data["value"] = value.split("_")[0]
            else:
                await delete_file(QR_DIR, file_name)
    logger(result_data)
    return result_data


async def get_user_data(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await UsersDAO.get_user_full_data(user_id)
        result = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üìÇ: \n\n"
            f"–Æ–∑–µ—Ä–Ω—ç–π–º üì±:    {user.username}\n"
            f"–†–∞–±–æ—á–∏–π ID üîÆ:    {user.manager_id}\n"
            f"–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ üèö:    {user.addres}\n"
            f"–ü–æ–º–æ–≥–ª–∏ –¥—Ä—É–≥–∏–º üíü:   0\n"
        )
        return result + f"ID –ø—É–Ω–∫—Ç–∞: {user.point_id}" if user.point_id != 1 else result
    except:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

async def get_point_list_caption(point_list: dict[int, Points]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –ø—É–Ω–∫—Ç–æ–≤.
    –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏ Point,
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ."""
    logger()
    point_list.pop(1, None)
    if not point_list:
        caption = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç"
    else:
        caption = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: \n\n"
        for point in point_list.values():
            caption += f"ID {point.point_id} {point.addres} \n"
    return caption 


async def get_notice_type(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–µ–Ω—é —Å —Ä–µ–∂–∏–º–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ü–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
    –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –≤ –±–¥."""
    caption = "–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}"
    notice = await NotificationsDAO.get_by_attribute("user_id", user_id)
    logger(notice, NOTIFICATION_TYPE)
    if notice:
        for n_type in NOTIFICATION_TYPE:
            if notice.notice_type in n_type:
                return caption.format(n_type[1])
    return caption.format("–í–´–ö–õ")